apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
subjects:
- kind: ServiceAccount
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
userNames:
- system:serviceaccount:{{.SpecialResource.Spec.Namespace}}:{{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
  annotations:
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/state: "driver-container"
    specialresource.openshift.io/driver-container-vendor: simple-kmod
spec:
  selector:
    matchLabels:
      app: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
  template:
    metadata:
      # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
      # reserves resources for critical add-on pods so that they can be rescheduled after
      # a failure.  This annotation works in tandem with the toleration below.
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
    spec:
      serviceAccount: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
      serviceAccountName: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
      containers:
      - image: quay.io/dagray/centos8-simple-kmod:{{.KernelFullVersion}} # .SpecialResource.Spec.DriverContainer.Destination?
        name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
        imagePullPolicy: Always
        command: ["/sbin/init"]
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "systemctl stop kmods-via-containers@simple-kmod"]
        securityContext:
          privileged: true
      nodeSelector:
        node-role.kubernetes.io/node: ""
        #feature.node.kubernetes.io/kernel-version.full: {{.KernelFullVersion}}
